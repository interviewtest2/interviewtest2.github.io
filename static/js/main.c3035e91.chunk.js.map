{"version":3,"sources":["Constant.js","Header.js","util.js","ThreeHrTable.js","DailyRowData.js","RecommendButtons.js","Body.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","defaultCityId","defaultTimespan","APIKey","unit","month_map","1","2","3","4","5","6","7","8","9","10","11","12","Header","className","role","aria-label","offsetDateTime","current","offset","moment","add","format","ThreeHrTable","data","this","props","console","log","map","row","i","time","key","src","width","height","parseFloat","toFixed","Component","DailyRowData","Object","keys","day","onClick","handleDaySelection","constant","parseInt","split","RecommendButtons","cityInput","charAt","toUpperCase","substring","recommendations","country","handleCityClick","Body","state","timespan","cityid","threeHrData","dailyData","daySelection","dateList","city","timezone_offset","input","errorMsg","bind","checkValidCity","APICall","handleSearchClick","newDay","setState","document","getElementById","addEventListener","value","toLowerCase","cities","duplicate_cities","fetch","then","response","json","processData","catch","error","length","date","ampm","util","push","forEach","weather_id","weather","icon","temp_max","temp_min","worst_weather_id","cloud_weather_id","worst_weather","cloud_weather","wind_max","worst_weather_icon","cloud_weather_icon","style","flex","temp","InputBox","type","placeholder","id","onKeyPress","e","target","Summary","header","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c3035e91.chunk.js","sourcesContent":["\r\n\r\nconst defaultCityId = 1819729 //HK\r\nconst defaultTimespan = '3h' //'3h' or 'daily'\r\nconst APIKey = 'aac94666fd0b8641675125039b6e6c22'\r\nconst unit = 'metric'\r\n\r\nconst month_map = {\r\n    1: 'Jan',\r\n    2: 'Feb',\r\n    3: 'Mar',\r\n    4: 'Apr',\r\n    5: 'May',\r\n    6: 'Jun',\r\n    7: 'Jul',\r\n    8: 'Aug',\r\n    9: 'Sep',\r\n    10: 'Oct',\r\n    11: 'Nov',\r\n    12: 'Dec'\r\n  }\r\n\r\nmodule.exports = {\r\n    defaultCityId: defaultCityId,\r\n    defaultTimespan: defaultTimespan,\r\n    APIKey: APIKey,\r\n  \r\n    unit: unit,\r\n    month_map: month_map\r\n}","import React from 'react';\n\nimport './App.css';\n\nfunction Header() {\n  return (\n    <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\" >\n    <div className=\"navbar-brand\">\n      <p className=\"navbar-item\">\n        Weather App\n      </p>\n  \n     \n    </div>\n  </nav>\n  );\n}\n\nexport default Header;\n","\r\nimport moment from 'moment'\r\n\r\nexport function offsetDateTime(current, offset){\r\n    \r\n    return (moment(current).add(offset, 'hours').format('YYYY-MM-DD hh a'))\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nclass ThreeHrTable extends Component {\r\n\r\n    render() {\r\n      let data = this.props.data\r\n      console.log(data)\r\n      return (\r\n  \r\n        data.map(function(row,i){\r\n          let time = (row[\"time\"])\r\n  \r\n        return(\r\n          <article className=\"media\" key={time}>\r\n            <figure className=\"media-left\">\r\n              <p className=\"image is-64x64\">\r\n              <img src={`https://openweathermap.org/img/wn/${row[\"icon\"]}@2x.png`} width=\"50px\" height=\"50px\"/>\r\n              </p>\r\n            </figure>\r\n            <div className=\"media-content\">\r\n              <div className=\"content\">\r\n                \r\n                  <strong>{time}</strong>&nbsp;&nbsp;\r\n                  -&nbsp;&nbsp;\r\n                  {row[\"weather\"]}\r\n                  <br/>\r\n                  \r\n                  <p className=\"button is-small\">{parseFloat(row[\"temp_min\"]).toFixed(1)}°C</p>\r\n                  &nbsp;&nbsp;-&nbsp;&nbsp;\r\n                  <p className=\"button is-small\">{parseFloat(row[\"temp_max\"]).toFixed(1)}°C</p><br/>\r\n                  <p>Wind: {row[\"wind\"]}m/s</p>\r\n                \r\n              </div>\r\n            </div>\r\n          </article>\r\n        )})\r\n      );\r\n    }\r\n  }\r\n\r\nexport default ThreeHrTable;","import React, { Component } from 'react';\r\nimport constant from './Constant.js'\r\n\r\nclass DailyRowData extends Component {\r\n    render() {\r\n      let data = this.props.data\r\n  \r\n      return (\r\n        <div>\r\n          <hr/>\r\n            <nav className=\"level\">\r\n        \r\n            {Object.keys(data).map((day, i) => (\r\n                <div key={`daily${day}`} className=\"level-item has-text-centered clickableBox paddedBox\" \r\n                onClick={()=>{this.props.handleDaySelection(i)}}>\r\n                <div>\r\n                \r\n                <p className=\"is-size-4\">\r\n                    {constant.month_map[parseInt(day.split(\"-\")[1])]}\r\n                    &nbsp;{parseInt(day.split(\"-\")[2])}\r\n                </p>\r\n                <img src={`https://openweathermap.org/img/wn/${data[day][\"icon\"]}@2x.png`} width=\"50px\" height=\"50px\" />\r\n                <br/>\r\n        \r\n                {parseFloat(data[day][\"temp_min\"]).toFixed(1)} - {parseFloat(data[day][\"temp_max\"]).toFixed(1)}°C<br/>\r\n        \r\n                {(data[day][\"weather\"])}<br/>\r\n        \r\n                Wind: {(data[day][\"wind_max\"])}m/s\r\n                \r\n                </div>\r\n                </div>\r\n            ))}\r\n            \r\n            </nav>\r\n        <hr/>\r\n      </div>\r\n        \r\n      );\r\n    }\r\n  }\r\n\r\nexport default DailyRowData;","import React, { Component } from 'react';\r\n\r\nclass RecommendButtons extends Component {\r\n    render() {\r\n      let cityInput = this.props.cityInput.charAt(0).toUpperCase() + this.props.cityInput.substring(1);\r\n      console.log(this.props.recommendations)\r\n      return(\r\n        <div className=\"is-centered has-text-centered\">\r\n        <p>Please select a city</p>\r\n        <div className=\"buttons is-centered\">\r\n        {Object.keys(this.props.recommendations).map((country) => (\r\n          <button key={`${country}_button`} className=\"button\" \r\n            onClick={() => this.props.handleCityClick(country, this.props.recommendations[country])}>\r\n          {cityInput}, {country}\r\n          </button>\r\n        ))}\r\n        </div>\r\n        <br/>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\nexport default RecommendButtons;\r\n","import React, { Component } from 'react';\n\nimport constant from './Constant.js'\nimport * as util from './util.js'\nimport './App.css';\nimport cities from './data/modifiedCityList.json'\nimport duplicate_cities from './data/duplicateCities.json'\nimport ThreeHrTable from './ThreeHrTable.js'\nimport DailyRowData from './DailyRowData.js'\nimport RecommendButtons from './RecommendButtons.js'\n\nclass Body extends Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n        timespan: constant.defaultTimespan,   //3h or daily\n        cityid: constant.defaultCityId,      //Defaults to Hong Kong.\n        data: [],                            //If empty, shows spinner icon\n        threeHrData: {},\n        dailyData: {},\n        daySelection: 0,                      //Defaults to today\n        dateList:[],\n        city: '',\n        country: '',\n        timezone_offset: 0,\n        recommendations: {},\n        input: '',\n        errorMsg: ''\n      \n\n    } \n\n    this.handleDaySelection = this.handleDaySelection.bind(this)\n    this.handleCityClick = this.handleCityClick.bind(this)\n    this.checkValidCity = this.checkValidCity.bind(this)\n  }\n\n  //Run API calls\n  componentDidMount(){\n    this.APICall(this.state.cityid)\n\n    this.handleSearchClick() //Add event listener for search box\n  }\n\n  handleDaySelection(newDay){\n    this.setState({\n      daySelection: newDay\n    })\n  }\n\n  handleCityClick(city, cityid){\n    this.APICall(cityid)\n    this.setState({recommendations: {}})\n  }\n\n\n  handleSearchClick(){\n    document.getElementById(\"inputCityBtn\").addEventListener(\"click\", () => {\n      let city = (document.getElementById(\"inputCityText\").value).toLowerCase()\n      //Check if city is valid, if yes, update city, else show error\n      this.checkValidCity(city)\n      \n    })\n  }\n\n  checkValidCity(city){\n    if (city in cities){\n      //Show error\n      let cityid = cities[city][\"id\"]\n      console.log(cityid)\n      this.setState({errorMsg: ''})\n      this.APICall(cityid)\n      return\n    } else if (city in duplicate_cities){\n      console.log(duplicate_cities[city])\n      this.setState({\n        recommendations: duplicate_cities[city],\n        input: city,\n        errorMsg: ''\n      })\n    } else{\n      this.setState({errorMsg: 'City not found, please try again.'})\n    }\n  }\n\n\n  //Runs when cityid is changed and at componentDidMount.\n  APICall(cityid){\n\n    fetch(`https://api.openweathermap.org/data/2.5/forecast?id=${cityid}&appid=${constant.APIKey}&units=${constant.unit}`)\n    .then(response => response.json())\n    .then(data => {\n\n      this.setState({\n        data: data,\n        city: data[\"city\"][\"name\"],\n        country: data[\"city\"][\"country\"]\n      })\n      this.processData(data)\n      console.log(data)\n    })\n    .catch(error => console.error(error))\n  }\n\n  //1 )Process into Key (Day), Value (Object of info for that day)\n  //2 )Process into Key (Day), Value (array of object for each 3hr period for that day)\n  processData(data){\n    //Set timezone offset\n    let offset = data[\"city\"][\"timezone\"]/3600\n    \n    data = data[\"list\"]\n    //Process data for 3 hour view\n    let threeHrData = {}\n    let dateList = []\n\n    //Loop through each 3hr period\n    for (let i = 0; i < data.length; i++){\n      \n      //Get local time\n      let offset_datetime = util.offsetDateTime(data[i][\"dt_txt\"], offset)\n      let date, time, ampm\n      [date, time, ampm] = (offset_datetime).split(\" \")\n\n      if (!(date in threeHrData)){\n        threeHrData[date] = []\n        dateList.push(date)\n      }\n      threeHrData[date].push({\n        \"time\": parseInt(time) + ampm,\n        \"temp_min\": data[i][\"main\"][\"temp_min\"],\n        \"temp_max\": data[i][\"main\"][\"temp_max\"],\n        \"weather\": data[i][\"weather\"][0][\"description\"],\n        \"weatherid\": data[i][\"weather\"][0][\"id\"],\n        \"wind\": data[i][\"wind\"][\"speed\"],\n        \"deg\": data[i][\"wind\"][\"deg\"],\n        \"icon\": data[i][\"weather\"][0][\"icon\"]\n      })\n    }\n\n    console.log(threeHrData)\n    this.setState({\n      threeHrData: threeHrData,\n      dateList: dateList\n    })\n\n    //Process data for daily summary\n    let dailyData = {}\n    Object.keys(threeHrData).forEach(date=>{\n      let temp_max = -999\n      let temp_min = 999\n      let worst_weather_id = 0\n      let cloud_weather_id = 800\n      let worst_weather = ''\n      let cloud_weather = 'clear sky'\n      let wind_max = 0\n      let worst_weather_icon = ''\n      let cloud_weather_icon = '01d'\n      //Get min/max temp, and worst weather and wind for that day.\n      for (let i = 0; i < threeHrData[date].length; i++){\n        if (threeHrData[date][i][\"temp_max\"] > temp_max) temp_max = threeHrData[date][i][\"temp_max\"]\n        if (threeHrData[date][i][\"temp_min\"] < temp_min) temp_min = threeHrData[date][i][\"temp_min\"]\n        if (threeHrData[date][i][\"wind\"] > wind_max) wind_max = threeHrData[date][i][\"wind\"]\n        if (threeHrData[date][i][\"weatherid\"] > worst_weather_id && threeHrData[date][i][\"weatherid\"] < 800)\n        {\n          worst_weather_id = threeHrData[date][i][\"weatherid\"]\n          worst_weather = threeHrData[date][i][\"weather\"]\n          worst_weather_icon= threeHrData[date][i][\"icon\"]\n        } \n\n        if (threeHrData[date][i][\"weatherid\"] > cloud_weather_id)\n        {\n          cloud_weather_id = threeHrData[date][i][\"weatherid\"]\n          cloud_weather = threeHrData[date][i][\"weather\"]\n          cloud_weather_icon= threeHrData[date][i][\"icon\"]\n        } \n\n      }\n\n      /*For daily summary,\n        If have multiple weather_id throughout the day, show the worst weather for that day.\n        Show Highest weather_id within 0 < id < 800. Otherwise show the highest value from group 8xx (cloudy statuses).\n      */\n      let weather_id\n      let weather\n      let icon\n      if (worst_weather_id > 0){\n        weather_id = worst_weather_id\n        weather = worst_weather\n        icon = worst_weather_icon\n      } else {\n        weather_id = cloud_weather_id\n        weather = cloud_weather\n        icon = cloud_weather_icon\n      }\n\n      dailyData[date] = {\n        \"temp_max\": temp_max,\n        \"temp_min\": temp_min,\n        \"weather_id\": weather_id,\n        \"weather\": weather,\n        \"wind_max\": wind_max,\n        \"icon\": icon\n      }\n    })\n\n    this.setState({dailyData:dailyData})\n    console.log(dailyData)\n  }\n\n  render(){\n\n  return (\n    <div>\n      <section className=\"section\">\n      \n      <div className=\"container is-centered\" style={{flex: 1}}>\n  \n      <InputBox checkValidCity={this.checkValidCity}/>\n      {this.state.errorMsg === '' ? null : <p className=\"is-size-7 has-text-danger\">{this.state.errorMsg}</p>}\n     \n      {Object.keys(this.state.recommendations).length === 0 ? null : <RecommendButtons \n        cityInput={this.state.input} \n        recommendations={this.state.recommendations}\n        handleCityClick={this.handleCityClick}/>}\n      \n      {this.state.city === '' ? null : <Summary \n        city={this.state.city} \n        temp={this.state.data[\"list\"][0][\"main\"][\"temp\"]}\n        country={this.state.country}/>}\n      \n\n        {Object.keys(this.state.dailyData).length === 0 ? null : \n        <DailyRowData data={this.state.dailyData} handleDaySelection={this.handleDaySelection}/>} \n        \n        {Object.keys(this.state.threeHrData).length === 0 ? null :\n        <div>\n        <strong>Forecast for {this.state.dateList[this.state.daySelection]}</strong>\n        <br/><br/>\n        <ThreeHrTable \n        data={this.state.threeHrData[this.state.dateList[this.state.daySelection]]}/>\n        </div>\n        } \n\n        </div>\n        \n        </section>\n    </div>\n  );\n}\n}\n\nexport default Body;\n\n\n/*\n      <div class=\"dropdown is-active\">\n  <div class=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n    <div class=\"dropdown-content\">\n      <a href=\"#\" class=\"dropdown-item\">\n        Dropdown item\n      </a>\n      <a class=\"dropdown-item\">\n        Other dropdown item\n      </a>\n      <a href=\"#\" class=\"dropdown-item is-active\">\n        Active dropdown item\n      </a>\n      <a href=\"#\" class=\"dropdown-item\">\n        Other dropdown item\n      </a>\n      <hr class=\"dropdown-divider\"/>\n      <a href=\"#\" class=\"dropdown-item\">\n        With a divider\n      </a>\n    </div>\n  </div>\n</div>\n*/\n\n\n\nclass InputBox extends Component {\n  render() {\n    return (\n      <nav className=\"level\">\n        <div className=\"level-item\">\n          <div className=\"field has-addons\">\n            <p className=\"control\">\n              <input className=\"input is-fullwidth\" type=\"text\" placeholder=\"Input a city\" id=\"inputCityText\"\n                 onKeyPress={(e) => {\n                   if (e.key === \"Enter\"){\n                      console.log(e.target.value)\n                      this.props.checkValidCity(e.target.value)\n                   }\n                 }}/>\n            </p>\n            <p className=\"control\">\n              <button className=\"button\" id=\"inputCityBtn\">\n                Search\n              </button>\n            </p>\n          </div>\n      </div>\n    </nav>\n     \n    );\n  }\n}\n\n\nclass Summary extends Component {\n  render() {\n    let header = `Current Weather in ${this.props.city}, ${this.props.country}`\n    return (\n      <div>\n        <p className=\"is-size-4 has-text-weight-semibold\">{header}</p>\n        <br/>\n        <p className=\"is-size-3\">\n          {parseFloat(this.props.temp).toFixed(1)}{this.props.unit}°C</p>\n        <br/>\n        </div>\n\n    );\n  }\n}\n","import React from 'react';\n\nimport './App.css';\nimport Header from './Header.js'\nimport Body from './Body.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Body/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}